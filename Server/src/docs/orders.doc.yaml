components:
  schemas:
    securitySchemes:
      cookieAuth:
        type: apiKey
        in: cookie
        name: token
    Order:
      type: object
      properties:
        user_id:
          type: string
          description: id of the user how has made the order
        product_id:
          type: string
          description: id of the products in the order
        quantity:
          type: number
          description: quantity of products in the order
        state:
          type: string
          description: state of the order
      example:
        user_id: HUi34n2j2GhT5
        product_id: OGTiTacnWQly7rBA&s
        quantity: 4
        state: reserved
    responses:
      res200:
        description: A list of orders.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Order'
        example:
          - user_id: HUi34n2j2GhT5
            product_id: OGTiTacnWQly7rBA&s
            quantity: 5
            state: reserved
      res201:
        type: object
        properties: 
          user_id: 
            type: string
            description: id of the owner of the order
          product_id:
            type: string
            description: id of the products in the order
          quantity:
            type: number
            description: quantity of products in the order
          state:
            type: string
            description: state of the order
        example:
          status: success
          payload: 
            user_id: ahjdfbwkedbkwj
            product_id: OGTiTacnWQly7rBA&s
            quantity: 2
            state: 10
      res400:
        type: object
        properties:
          statusCode:
            type: number
            description: code of the error 
          url: 
            type: string
            description: the url where the error is
          message:
            type: string
            description: description of the error
        example:
          statusCode: 400
          url: 'POST /api/products'
          message: 'products validation failed: title: Path `title` is required.'
      res401:
        type: object
        properties:
          statusCode:
            type: string
            description: code of the error
          url:
            type: string
            description: the url where the error is
          message:
            type: string
            description: description of the error
        example:
          statusCode: 401
          url: 'POST /api/products'
          message: 'products validation failed: No auth!'
      res403:
        type: object
        properties:
          statusCode:
            type: string
            description: code of the error
          url:
            type: string
            description: the url where the error is
          message:
            type: string
            description: description of the error
        example:
          statusCode: 403
          url: 'POST /api/products'
          message: 'products validation failed: Forbidden!'

paths: 
  /api/orders:
    post:
      summary: Create a order
      tags:
        - Order
      security: 
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/res201'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/res400'
        '401':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/res401'
        '403':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/res403'
    get:
      summary: Retrieve a list of orders
      tags:
        - Order
      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: Filter orders by id
        - in: query
          name: user id
          schema:
            type: string
          description: Filter orders by user id
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                $ref: '#/components/responses/res200'
        '400':
          description: Bad request
        '500':
          description: Internal server error
    put:
      summary: Update a order
      tags:
        - Order
      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: ID of the order to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Order not found
    delete:
      summary: Delete a order
      tags:
        - Order
      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: ID of the order to delete
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: order not found
