components:
  schemas:
    securitySchemes:
      cookieAuth:
        type: apiKey
        in: cookie
        name: token
    Product:
      type: object
      properties:
        title:
          type: string
          description: name of the product
        poster:
          type: string
          description: image of the product
        price:
          type: number
          description: price of the product
        stock:
          type: number
          description: quantity of products available
        _id:
          type: string
          description: id of the product
      example:
        title: shoes
        poster: https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSozUlJNcTCDzg_qBCbt_OGTiTacnWQly7rBA&s
        price: 250
        stock: 10
        _id: fdadfqed23e3r
    responses:
      res200:
        description: A list of products.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Product'
        example:
          - title: shoes
            poster: https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSozUlJNcTCDzg_qBCbt_OGTiTacnWQly7rBA&s
            price: 250
            stock: 10
            _id: fdadfqed23e3r
      res201:
        type: object
        properties: 
          title: 
            type: string
            description: title of the product created
          poster:
            type: string
            description: image of the product created
          price:
            type: number
            description: price of the product created
          stock:
            type: number
            description: quantity of products
          _id:
            type: string
            description: id of the product created
        example:
          status: success
          payload: 
            title: shoes
            poster: https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSozUlJNcTCDzg_qBCbt_OGTiTacnWQly7rBA&s
            price: 250
            stock: 10
            _id: fdadfqed23e3r
      res400:
        type: object
        properties:
          statusCode:
            type: number
            description: code of the error 
          url: 
            type: string
            description: the url where the error is
          message:
            type: string
            description: description of the error
        example:
          statusCode: 400
          url: 'POST /api/products'
          message: 'products validation failed: title: Path `title` is required.'
      res401:
        type: object
        properties:
          statusCode:
            type: string
            description: code of the error
          url:
            type: string
            description: the url where the error is
          message:
            type: string
            description: description of the error
        example:
          statusCode: 401
          url: 'POST /api/products'
          message: 'products validation failed: No auth!'
      res403:
        type: object
        properties:
          statusCode:
            type: string
            description: code of the error
          url:
            type: string
            description: the url where the error is
          message:
            type: string
            description: description of the error
        example:
          statusCode: 403
          url: 'POST /api/products'
          message: 'products validation failed: Forbidden!'

paths: 
  /api/products:
    post:
      summary: Create a product
      tags:
        - Product
      security: 
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/res201'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/res400'
        '401':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/res401'
        '403':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/res403'
    get:
      summary: Retrieve a list of products
      tags:
        - Product
      parameters:
        - in: query
          name: title
          schema:
            type: string
          description: Filter products by title
        - in: query
          name: price
          schema:
            type: number
          description: Filter products by price
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                $ref: '#/components/responses/res200'
        '400':
          description: Bad request
        '500':
          description: Internal server error
    put:
      summary: Update a product
      tags:
        - Product
      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: ID of the product to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Product not found
    delete:
      summary: Delete a product
      tags:
        - Product
      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: ID of the product to delete
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Product not found
